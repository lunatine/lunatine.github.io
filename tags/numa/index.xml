<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>numa on Lunatine&#39;s Box</title>
    <link>https://example.com/tags/numa/</link>
    <description>Recent content in numa on Lunatine&#39;s Box</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Lunatine</copyright>
    <lastBuildDate>Thu, 14 Jul 2016 06:18:34 +0000</lastBuildDate>
    
	<atom:link href="https://example.com/tags/numa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NUMA with Linux</title>
      <link>https://example.com/posts/numa-with-linux/</link>
      <pubDate>Thu, 14 Jul 2016 06:18:34 +0000</pubDate>
      
      <guid>https://example.com/posts/numa-with-linux/</guid>
      <description>개인 위키에서 정리하던 내용을 블로그로 옮긴 것 입니다. 이 문서는 NUMA 아키텍처에 대한 간략한 소개와 Linux에서의 활용 방법에 대해서 소개하고 있습니다.
 1. System Topology 1-1. CMP 최근 CPU는 하나의 소켓에 여러개의 코어를 가지고 있다. 이를 보통 멀티코어라고 지칭하며 하나의 칩에 여러개의 프로세서가 올라가기 때문에 CMP(Chip-level Multi Processor)라고도 부른다. 이러한 멀티코어 CPU에 대한 메모리 관계는 아래와 같이 표현 할 수 있다.
1-2. SMP 하지만, 멀티코어 CPU를 2개 이상 장착한 시스템의 경우에는 메모리를 2개 이상의 CPU가 접근하기 때문에 CPU와 메모리 사이를 네트워크로 묶어서 접근이 필요하며 아래와 같이 표현이 가능하다.</description>
    </item>
    
  </channel>
</rss>