<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CentOS on Lunatine&#39;s Box</title>
    <link>https://example.com/tags/centos/</link>
    <description>Recent content in CentOS on Lunatine&#39;s Box</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Lunatine</copyright>
    <lastBuildDate>Fri, 22 Mar 2019 06:16:42 +0000</lastBuildDate>
    
	<atom:link href="https://example.com/tags/centos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NVMe에서 iostat의 높은 %util 값 (RHEL/CentOS 7.6)</title>
      <link>https://example.com/posts/high-iostat-util-on-nvme/</link>
      <pubDate>Fri, 22 Mar 2019 06:16:42 +0000</pubDate>
      
      <guid>https://example.com/posts/high-iostat-util-on-nvme/</guid>
      <description>안내: 이 글을 읽기 전에 [Linux iostat] 문서를 먼저 읽어주시기 바랍니다. 버전: 2019/03/22 (수정), 2019/01/28 (초안)  최근 NVMe와 같이 디스크 장치에서 병렬처리가 가능한 제품을 사용 할 때에 iostat의 지표 값이 이상하다는 이야기가 많습니다. 잘 알려진 내용으로는 Linux iostat에서 소개하고 있는 내용처럼 svctm 지표 자체가 제대로 계산되지 않아서 제 성능을 내기도 전에 100%의 Utilization 지표를 나타내는 이슈가 있습니다.
다만, 최근 RHEL/CentOS 7.6에서 동일하거나 유사한 수준의 I/O 처리에 대해서 기존 7.</description>
    </item>
    
    <item>
      <title>비 정상적인 Swap 수치</title>
      <link>https://example.com/posts/abnormal-swap-values/</link>
      <pubDate>Tue, 29 Jan 2019 08:29:40 +0000</pubDate>
      
      <guid>https://example.com/posts/abnormal-swap-values/</guid>
      <description>증상서버 시스템에서 Swap 크기를 확인 할 때 아래와 같이 보유한 스왑 크기보다 훨씬 큰 비 정상적인 수치가 표시 됩니다.
$ free total used free shared buffers cached Mem: 65944564 42388800 23555764 48 3281272 30509248 -/+ buffers/cache: 8598280 57346284  cat /proc/meminfo | grep ^Swap SwapCached: 1380 kB SwapTotal: 2096124 kB SwapFree: 77770336 kB  원인 커널의 get_swap_page()와 관련된 수정 사항에서 스핀락(swap_lock)이 제거 되었는데 이로 인해서 nr_swap_pages 오류와 /proc/meminfo의 오류를 야기하게 되었습니다.</description>
    </item>
    
    <item>
      <title>[FAQ] ldirectord의 성능이 안나오는 증상</title>
      <link>https://example.com/posts/faq-ldirectord-performance-issue/</link>
      <pubDate>Fri, 17 Jul 2015 11:06:29 +0000</pubDate>
      
      <guid>https://example.com/posts/faq-ldirectord-performance-issue/</guid>
      <description>요즘에는 많이 사용하는 어플리케이션은 아니지만 종종 L3DSR을 간편하게 구현하기 위해서 LVS ldirectord를 이용한 LB(Load Balancing)구성을 하는 경우가 있다.
주로 오래된 시스템을 LVS 밸런싱 서버로 사용하곤 했는데 최근에 RHEL/CentOS 6 기준으로 설정하다보니 특이한 증상이 발견되어서 이에 대해서 간단히 해결책을 정리해 본다.
환경 OS: RHEL/CentOS 6.x Package: - heartbeat: 3.0.4-2.el6 - ldirectord: 3.9.6-1.fc22.x86_64 참고로, ldirectord의 경우 RHEL/CentOS 6부터 기본 패키지에서 빠졌기 때문에 fedora core 22 버전의 패키지를 사용하면 된다  증상 ldirectord를 이용해서 L3DSR 밸런싱을 구성하여 웹 서비스를 동작시켰는데 해당 서버들의 응답속도가 300ms 이상 느려지는 현상이 발생 하였다.</description>
    </item>
    
    <item>
      <title>RHEL6에서 Python 2.7/3.4 사용하기</title>
      <link>https://example.com/posts/python27-34-on-rhel-centos/</link>
      <pubDate>Wed, 21 Jan 2015 06:27:21 +0000</pubDate>
      
      <guid>https://example.com/posts/python27-34-on-rhel-centos/</guid>
      <description>본 문서는 RHEL6에서 Python 2.7과 3.4를 사용하기 위해 추천하는 방법을 안내하고 있다. 비단, RHEL6 뿐만 아니라 CentOS6와 RHEL5, CentOS5에도 적용이 가능하다.
Python 2.6 RHEL6에는 기본적으로 python 2.6 버전이 탑재되어 있다. 그리고 OS를 구성하는 많은 패키지들이 이 버전에 기초하여 의존성을 갖고 있다. 보통 이런 환경에서 python 2.7을 사용하기 위해서 별도로 python 2.7을 다운로드 받아 설치한다. 다만, 그냥 설치하다보니 OS 기본 python의 실행경로나 라이브러리 참조 경로를 변경해버려서 OS가 기본적으로 (python 2.6에 의존하여) 제공하는 많은 서비스 패키지가 제대로 동작하지 않는 문제가 발생한다.</description>
    </item>
    
  </channel>
</rss>