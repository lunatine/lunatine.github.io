<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hardware on Lunatine&#39;s Box</title>
    <link>/categories/hardware/</link>
    <description>Recent content in hardware on Lunatine&#39;s Box</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 22 Mar 2019 06:16:42 +0000</lastBuildDate>
    
	<atom:link href="/categories/hardware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NVMe에서 iostat의 높은 %util 값 (RHEL/CentOS 7.6)</title>
      <link>/2019/03/22/high-iostat-util-on-nvme/</link>
      <pubDate>Fri, 22 Mar 2019 06:16:42 +0000</pubDate>
      
      <guid>/2019/03/22/high-iostat-util-on-nvme/</guid>
      <description>안내: 이 글을 읽기 전에 [Linux iostat] 문서를 먼저 읽어주시기 바랍니다. 버전: 2019/03/22 (수정), 2019/01/28 (초안)  최근 NVMe와 같이 디스크 장치에서 병렬처리가 가능한 제품을 사용 할 때에 iostat의 지표 값이 이상하다는 이야기가 많습니다. 잘 알려진 내용으로는 Linux iostat에서 소개하고 있는 내용처럼 svctm 지표 자체가 제대로 계산되지 않아서 제 성능을 내기도 전에 100%의 Utilization 지표를 나타내는 이슈가 있습니다.
다만, 최근 RHEL/CentOS 7.6에서 동일하거나 유사한 수준의 I/O 처리에 대해서 기존 7.</description>
    </item>
    
    <item>
      <title>RHEL6 - intel_idle과 C States</title>
      <link>/2015/01/06/rhel6-intel_idle-and-c-states/</link>
      <pubDate>Tue, 06 Jan 2015 17:02:03 +0000</pubDate>
      
      <guid>/2015/01/06/rhel6-intel_idle-and-c-states/</guid>
      <description>C/G/S/P states intel_idle과 관련된 내용을 다루기에 앞서 P-States와 C-States에 대해서 간단히 정리하고자 한다. Intel 아키텍처 환경에서 리눅스 커널과 CPU를 알아가다보면 P/S/G/C States에 대한 내용을 접할 수 있다. 이러한 상태 값에 대해서 간단히 설명하도록 하겠다.
P-States P-States는 작업 부하에 따라서 CPU의 전압과 클럭주파수를 조절하는 정도를 정의 한 값으로 명령어 처리(Operation)상태를 기준으로 절전 및 성능 향상을 꾀하기 위한 기법이다. 과거에는 SpeedStep이라는 기술로 소개 되었기(정확히 같은 것은 아니다) 때문에 단순히 클럭주파수를 조절해서 에너지 절약을 위한 방안으로만 치부되었는데 CPU가 연산처리를 할 때의 상태를 반영하고 있다.</description>
    </item>
    
    <item>
      <title>Smart Array P420 캐시 비활성화 증상</title>
      <link>/2014/06/17/smart-array-p420-kaesi-bihwalseonghwa-jeungsang/</link>
      <pubDate>Tue, 17 Jun 2014 10:20:13 +0000</pubDate>
      
      <guid>/2014/06/17/smart-array-p420-kaesi-bihwalseonghwa-jeungsang/</guid>
      <description>Smart Array Cache 비활성화 증상  본 문서는 Smart Array 컨트롤러(P420, P420i, P421 등)에서 발생하는 캐시 비활성화 증상과 해결방법에 대해서 소개하고 있습니다.
 증상  시스템의 I/O 성능이 낮음
 Smart Array 컨트롤러의 캐시가 비 활성화 되어있음 컨트롤러 상태 정보 확인 결과 Capacitor 충전상태에 문제가 있으며 임시로 비활성화 되어있음을 확인할 수 있습니다.   컨트롤러 상태 메시지
 Cache Status: Temporarily Disabled Cache Status Details: Cache disabled; capacitor charge is low  상기 예시의 컨트롤러는 별도의 배터리유닛을 사용하지 않는 FBWC 임에도 불구하고 충전 오류 메시지가 발생하고 있음.</description>
    </item>
    
    <item>
      <title>mount : already mounted or busy 메시지</title>
      <link>/2014/02/10/mount-already-mounted-or-busy-mesiji/</link>
      <pubDate>Mon, 10 Feb 2014 02:10:41 +0000</pubDate>
      
      <guid>/2014/02/10/mount-already-mounted-or-busy-mesiji/</guid>
      <description>환경 및 증상 디스크 교체 및 비RAID 환경에서 아래와 같은 메시지와 함께 마운트가 되지 않는 증상 발생
$ mount -t ext4 /dev/sdb1 /disk/2 mount : /dev/sdb1 already mounted or /disk/2 busy 원인 교체 된 디스크에 다른 곳에서 설정 된 RAID flag 정보가 남아있거나 dmraid가 RAID 멤버로 잘못 인지한 경우에 발생.
해결 Case 1. dmraid 아래 명령을 통해서 dmraid가 해당 디스크를 RAID 구성원으로 판단하고 있는지 확인이 가능.
$ dmraid -s  dmraid 패키지를 통해 RAID를 사용하지 않는다면 해당 패키지를 삭제하고 재부팅 하는 방법이 있지만 mkinitrd와 의존성을 같는 경우가 있기 때문에 현 시스템에 RAID를 사용하지 않는 다면(혹은 H/W RAID 컨트롤러로만 볼륨을 관리한다면) 아래 명령을 통해서 설정을 삭제할 수 있음.</description>
    </item>
    
    <item>
      <title>Linux에서 MBR 파티션 테이블 살펴보기</title>
      <link>/2014/02/05/faq-linuxeseo-mbr-patisyeon-teibeul-salpyeobogi/</link>
      <pubDate>Wed, 05 Feb 2014 17:41:55 +0000</pubDate>
      
      <guid>/2014/02/05/faq-linuxeseo-mbr-patisyeon-teibeul-salpyeobogi/</guid>
      <description>기존 Tumblr의 글을 옮겨온 것이기 때문에 Markdown 확장문법 유무로 인한 차이가 있습니다.  MBR 파티션 테이블 본 문서는 리눅스 시스템에서 MBR 파티션 테이블의 구조를 확인하는 방법에 대해서 설명하고 있습니다.1
MBR이란? MBR은 Master Boot Record의 약자로 부팅을 하기 위한 정보를 담고 있으며 일반적으로 0번 섹터에 저장 되어 있습니다. MBR이 여전히 많이 쓰이고 있지만 오래 된 기술이다보니 그 크기는 1개 섹터 크기 (512Byte)로 되어있어 제약사항이 많습니다. 상세한 정보는 위키피디아 문서를 참고하시면 됩니다.</description>
    </item>
    
    <item>
      <title>[FAQ] Cylinder 값이 초과 되었는데? (CHS vs LBA)</title>
      <link>/2014/02/05/faq-cylinder-gabsi-cogwa-doeeossneunde-chs-vs-lba/</link>
      <pubDate>Wed, 05 Feb 2014 17:41:12 +0000</pubDate>
      
      <guid>/2014/02/05/faq-cylinder-gabsi-cogwa-doeeossneunde-chs-vs-lba/</guid>
      <description>이미 인터넷에 CHS와 LBA에 대한 내용을 다룬 훌륭한 문서가 많이 있다. 다만, 최근 Cylinder 값의 초과에 대해서 이상하게 생각하는 경우에 대한 답변을 위해 본 문서를 작성하게 되었다.
Advanced Format과 alignment 최근 Advanced Format(AF) 디스크가 등장하면서 디스크를 파티셔닝하는데 정렬(alignment)에 대한 이슈가 생겨났다. 기존 섹터가 512byte 단위였던 것이 4096byte(4K)로 증가하면서 디스크 접근에 있어서 성능저하를 막기 위해 파티션의 시작지점을 4K 단위로 맞춰 줄 필요가 생긴 것이다. 최신 parted에서는 aligment 옵션을 제공하지만 fdisk와 같은 툴 에서는 제공하지 않아 Bash 쉘 스크립트로 섹터 값으로 계산해서 파티셔닝 하도록 툴을 만들어 해결 했고 이를 업무에 활용하였다.</description>
    </item>
    
    <item>
      <title>[FAQ] ht = HyperThread에 대한 오해</title>
      <link>/2014/02/05/faq-ht-hyperthreade-daehan-ohae/</link>
      <pubDate>Wed, 05 Feb 2014 17:39:57 +0000</pubDate>
      
      <guid>/2014/02/05/faq-ht-hyperthreade-daehan-ohae/</guid>
      <description>과거에 대략 정리했던 내용을 다시 포스팅하는 이유는 문서 정리차원입니다.
일반적으로 Linux의 CPU정보 (/proc/cpuinfo)에서 ht 플래그 가 보이면 HyperThread가 지원되는 CPU로 알려져 있습니다. 따라서 해당 플래그의 존재 여부에 따라서 HyperThread가 되고 안되고를 많이 판단하는데 결과부터 이야기 한다면 적어도 지금의 CPU로는 ht 플래그로는 HyperThread 기능 여부를 정확히 판별할 수 없습니다.
개인적으로 HyperThread 기능이 없는 CPU가 ht 플래그를 가지고 있는 것을 발견하였고 이에 대한 의문점을 해결하기 위해 커널 소스를 모두 보았으나 소스의 변화나 특이점은 없었습니다.</description>
    </item>
    
  </channel>
</rss>